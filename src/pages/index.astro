---
import Layout from "@/layouts/Layout.astro";

import { getReservation, type EntryTime } from "@/types/microcmsReservation";
const reservationRes = await getReservation();

interface CalendarDay {
  day: number | null; // 日付 (nullなら空白)
  times?: EntryTime[]; // 該当する時間のデータ
}

// 現在日付を設定
const japanOffset = 9 * 60 * 60 * 1000;
const utcDate = new Date(reservationRes.entryMonth);
const today: Date = new Date(utcDate.getTime() + japanOffset);
const currentYear: number = today.getFullYear();
const currentMonth: number = today.getMonth(); // 0 (1月) - 11 (12月)

// 月名の配列
const weeks = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
const monthNames: string[] = Array.from({ length: 12 }, (_, i) =>
  String(i + 1),
);

// JSONデータから該当する日付と時間をマッピングする関数
function getTimesForDay(day: number): EntryTime[] | undefined {
  const targetDate = new Date(currentYear, currentMonth, day)
    .toISOString()
    .split("T")[0];
  const match = reservationRes.entryDates.find((d) =>
    d.entryDate?.startsWith(targetDate),
  );
  return match?.entryTimes;
}

// 当月のカレンダーを生成する関数
function generateCalendar(): CalendarDay[] {
  const firstDay = new Date(currentYear, currentMonth, 1).getDay(); // 月の初日の曜日
  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate(); // 月の日数
  const calendar: CalendarDay[] = [];

  // 空白部分 (先頭を埋める)
  for (let i = 0; i < firstDay; i++) {
    calendar.push({ day: null });
  }

  // 日付部分
  for (let day = 1; day <= daysInMonth; day++) {
    const times = getTimesForDay(day);
    calendar.push({ day, times });
  }

  return calendar;
}

const calendar = generateCalendar();
---

<Layout isTopPage={true}>
  <main>
    <h2>{currentYear}年{monthNames[currentMonth]}月</h2>
    <table class="calendar">
      <thead>
        <tr class="calendar-header">
          {weeks.map((week) => <th>{week}</th>)}
        </tr>
      </thead>
      <tbody>
        {
          Array.from({ length: Math.ceil(calendar.length / 7) }, (_, i) => (
            <tr>
              {calendar.slice(i * 7, (i + 1) * 7).map((day) => (
                <td class={`day ${day.day ? "" : "empty"}`}>
                  {day.day && (
                    <>
                      <div>{day.day}</div>
                      {day.times &&
                        day.times.map((time) => (
                          <a href="#">{time.entryTime}</a>
                        ))}
                    </>
                  )}
                </td>
              ))}
            </tr>
          ))
        }
      </tbody>
    </table>
  </main>
</Layout>

<style>
  main {
    padding-block: 64px;
  }
  h2 {
    text-align: center;
    margin-bottom: 24px;
  }
  .calendar {
    width: 100%;
    max-width: 1200px;
    margin: auto;
    border-collapse: collapse;
    border-spacing: 1px;
  }
  .calendar-header {
    font-size: 14px;
    background-color: #fafafa;
  }
  .calendar-header th {
    padding: 10px;
    border: 1px solid #ddd;
  }
  .day {
    font-weight: bold;
    text-align: center;
    width: calc(100% / 7);
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    height: 120px;
    vertical-align: top;
  }
  th:nth-child(1),
  td:nth-child(7n + 1) {
    color: #ff0000;
  }
  th:nth-child(7),
  td:nth-child(7n) {
    color: #0000ff;
  }
  a {
    color: #000;
    display: block;
    font-weight: normal;
    text-decoration: none;
    padding: 4px;
    border: 1px solid #ddd;
    border-radius: 2px;
    margin-top: 5px;
  }
  a:hover {
    border-color: #ff0000;
    background-color: #fff0f5;
  }
</style>
